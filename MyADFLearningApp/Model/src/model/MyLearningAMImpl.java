package model;

import java.sql.SQLException;

import model.common.MyLearningAM;

import model.view.CategoryVOImpl;

import model.view.CategoryVORowImpl;

import model.view.ItemDetailsVORowImpl;
import model.view.ItemVORowImpl;

import model.view.RegistrationVORowImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jan 08 11:38:07 IST 2009
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MyLearningAMImpl extends ApplicationModuleImpl implements MyLearningAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MyLearningAMImpl() {
    }

    /**
     * Container's getter for CatalogPageVO.
     * @return CatalogPageVO
     */
    public ViewObjectImpl getCatalogPageVO() {
        return (ViewObjectImpl)findViewObject("CatalogPageVO");
    }

    /**
     * Container's getter for CatalogCategoryVO.
     * @return CatalogCategoryVO
     */
    public ViewObjectImpl getCatalogCategoryVO() {
        return (ViewObjectImpl)findViewObject("CatalogCategoryVO");
    }

    /**
     * Container's getter for CatalogListVO.
     * @return CatalogListVO
     */
    public ViewObjectImpl getCatalogListVO() {
        return (ViewObjectImpl)findViewObject("CatalogListVO");
    }

    /**
     * Container's getter for CategoryListVO.
     * @return CategoryListVO
     */
    public ViewObjectImpl getCategoryListVO() {
        return (ViewObjectImpl)findViewObject("CategoryListVO");
    }


    /**
     * Container's getter for EmployeesListVO.
     * @return EmployeesListVO
     */
    public ViewObjectImpl getEmployeesListVO() {
        return (ViewObjectImpl)findViewObject("EmployeesListVO");
    }

    /**
     * Container's getter for ItemListPageVO.
     * @return ItemListPageVO
     */
    public ViewObjectImpl getItemListPageVO() {
        return (ViewObjectImpl)findViewObject("ItemListPageVO");
    }

    /**
     * Container's getter for ItemListVO.
     * @return ItemListVO
     */
    public ViewObjectImpl getItemListVO() {
        return (ViewObjectImpl)findViewObject("ItemListVO");
    }

    /**
     * Container's getter for RegistrationPageVO.
     * @return RegistrationPageVO
     */
    public ViewObjectImpl getRegistrationPageVO() {
        return (ViewObjectImpl)findViewObject("RegistrationPageVO");
    }

    /**
     * Container's getter for RegLinesRegPageVO.
     * @return RegLinesRegPageVO
     */
    public ViewObjectImpl getRegLinesRegPageVO() {
        return (ViewObjectImpl)findViewObject("RegLinesRegPageVO");
    }

    /**
     * Container's getter for ItemDetailsPageVO.
     * @return ItemDetailsPageVO
     */
    public ViewObjectImpl getItemDetailsPageVO() {
        return (ViewObjectImpl)findViewObject("ItemDetailsPageVO");
    }

    /**
     * Container's getter for SearchPageRegistrationVO.
     * @return SearchPageRegistrationVO
     */
    public ViewObjectImpl getSearchPageRegistrationVO() {
        return (ViewObjectImpl)findViewObject("SearchPageRegistrationVO");
    }

    /**
     * Container's getter for SearchPageRegistrationLinesVO.
     * @return SearchPageRegistrationLinesVO
     */
    public ViewObjectImpl getSearchPageRegistrationLinesVO() {
        return (ViewObjectImpl)findViewObject("SearchPageRegistrationLinesVO");
    }

    /**
     * Container's getter for CatalogCategoryVL1.
     * @return CatalogCategoryVL1
     */
    public ViewLinkImpl getCatalogCategoryVL1() {
        return (ViewLinkImpl)findViewLink("CatalogCategoryVL1");
    }


    /**
     * Container's getter for RegistrationPageVL1.
     * @return RegistrationPageVL1
     */
    public ViewLinkImpl getRegistrationPageVL1() {
        return (ViewLinkImpl)findViewLink("RegistrationPageVL1");
    }

    /**
     * Container's getter for ItemDetailsVL1.
     * @return ItemDetailsVL1
     */
    public ViewLinkImpl getItemDetailsVL1() {
        return (ViewLinkImpl)findViewLink("ItemDetailsVL1");
    }

    /**
     * Container's getter for HomePageVL1.
     * @return HomePageVL1
     */
    public ViewLinkImpl getHomePageVL1() {
        return (ViewLinkImpl)findViewLink("HomePageVL1");
    }
    
    /* Developer: Vikram
     * Last Modified: 8/Jan/2009
     * Description: fetch the items correspoending to the selected Category
     * @param: CategoryId= Id of the selected category.
     */
    public void getItemInCategory(String CategoryId){
        ViewObjectImpl voItem=getCatalogueCategoryItemVO();
        voItem.setWhereClause("CATEGORY_ID1 = " + CategoryId);
        voItem.executeQuery();        
    }

    /**
     * Container's getter for CatalogueCategoryItemVO.
     * @return CatalogueCategoryItemVO
     */
    public ViewObjectImpl getCatalogueCategoryItemVO() {
        return (ViewObjectImpl)findViewObject("CatalogueCategoryItemVO");
    }
    
    /* Developer: Vikram
     * Last Modified: 8/Jan/2009
     * Description: initilaize new registration line with selected item values      
     */
    public void initilizeNewRegLines(String productCode,String regId) 
    {
        /*get Item details for the specified item using product_code*/
        System.out.println("Product Code=" + productCode + " RegId="+regId);
        ViewObjectImpl itemVO=getItemListVO();        
        String clause ="PRODUCT_CODE = '" + productCode +  "'";
        itemVO.setWhereClause(clause);
        itemVO.executeQuery();
        itemVO.setCurrentRowAtRangeIndex(0);
        System.out.println("Row count=" + itemVO.getEstimatedRowCount());
        ItemVORowImpl itemRow=(ItemVORowImpl)itemVO.getCurrentRow();
        ViewObjectImpl newItemLineVO=this.getItemDetailsPageVO();
        ItemDetailsVORowImpl newGoodsLineRow=(ItemDetailsVORowImpl)newItemLineVO.getCurrentRow();
        newGoodsLineRow.setProductCode(productCode);
        Number unitPrice=itemRow.getUnitPrice();
        String uom= itemRow.getUom();
        String currency= itemRow.getCurrency();
        String manufacturer = itemRow.getManufacturer();
        if(unitPrice!=null)
            newGoodsLineRow.setUnitPrice(unitPrice);                            
        if(uom!=null)
            newGoodsLineRow.setUom(uom);
        if(currency!=null)
            newGoodsLineRow.setCurrency(currency);
        if(manufacturer!=null)
            newGoodsLineRow.setManufacturer(manufacturer);
        if(regId!=null)
        {
            try 
            {
                newGoodsLineRow.setRegistrationId(new Number(regId));
            } catch (SQLException e) 
            {
            }
        }
        
    } 
    
    /* Developer: Vikram
     * Last Modified: 8/Feb/2009
     * Description: total USD amount of the registration lines and total 
     * PFI(package, fright and insurance) amount of the registration lines 
     * added in the registration.   
     */
    public void updateRegLinesAmt() {
        ViewObjectImpl vo = getRegistrationPageVO();        
        RegistrationVORowImpl currRow=  (RegistrationVORowImpl)vo.getCurrentRow();
        RowSet items = (RowSet)currRow.getRegistrationLinesVO();
        double totalUsdAmt=0.0,totalPfiAmt=0.0;
        String usdAmt=null,pfiAmt=null;
        if(items.getEstimatedRowCount()!=0) 
        {
            while (items.hasNext()) 
            {
                Row curItem = items.next();
                usdAmt=curItem.getAttribute("UsdAmount").toString();
                pfiAmt=curItem.getAttribute("UsdPfiAmount").toString();
                System.out.println("USD Amount= " + usdAmt + " , pfi Amt=" + pfiAmt);                    
                if(usdAmt!=null)
                    totalUsdAmt = totalUsdAmt + Double.parseDouble(usdAmt);
                if(pfiAmt!=null)
                    totalPfiAmt = totalPfiAmt + Double.parseDouble(pfiAmt);
            }
            System.out.println("totalPfiAmt="+totalPfiAmt + " totalUsdAmt= " + totalUsdAmt);
            try {
                currRow.setTotalPfiAmt(new Number(totalPfiAmt));
                currRow.setTotalUsdAmt(new Number(totalUsdAmt));
            } catch (SQLException e) {
            }
            
            //commit();
        }
    }
    private void commit() {
        this.getDBTransaction().commit();
    }
}
