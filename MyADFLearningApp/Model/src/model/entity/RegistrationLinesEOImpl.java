package model.entity;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jan 21 11:02:21 IST 2009
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RegistrationLinesEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        RegistrationId {
            public Object get(RegistrationLinesEOImpl obj) {
                return obj.getRegistrationId();
            }

            public void put(RegistrationLinesEOImpl obj, Object value) {
                obj.setRegistrationId((Number)value);
            }
        }
        ,
        LineId {
            public Object get(RegistrationLinesEOImpl obj) {
                return obj.getLineId();
            }

            public void put(RegistrationLinesEOImpl obj, Object value) {
                obj.setLineId((Number)value);
            }
        }
        ,
        ProductCode {
            public Object get(RegistrationLinesEOImpl obj) {
                return obj.getProductCode();
            }

            public void put(RegistrationLinesEOImpl obj, Object value) {
                obj.setProductCode((String)value);
            }
        }
        ,
        Qty {
            public Object get(RegistrationLinesEOImpl obj) {
                return obj.getQty();
            }

            public void put(RegistrationLinesEOImpl obj, Object value) {
                obj.setQty((Number)value);
            }
        }
        ,
        RegistrationEO {
            public Object get(RegistrationLinesEOImpl obj) {
                return obj.getRegistrationEO();
            }

            public void put(RegistrationLinesEOImpl obj, Object value) {
                obj.setRegistrationEO((RegistrationEOImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(RegistrationLinesEOImpl object);

        public abstract void put(RegistrationLinesEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int REGISTRATIONID = AttributesEnum.RegistrationId.index();
    public static final int LINEID = AttributesEnum.LineId.index();
    public static final int PRODUCTCODE = AttributesEnum.ProductCode.index();
    public static final int QTY = AttributesEnum.Qty.index();
    public static final int REGISTRATIONEO = AttributesEnum.RegistrationEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public RegistrationLinesEOImpl() {
    }

    /**
     * Gets the attribute value for RegistrationId, using the alias name RegistrationId.
     * @return the RegistrationId
     */
    public Number getRegistrationId() {
        return (Number)getAttributeInternal(REGISTRATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RegistrationId.
     * @param value value to set the RegistrationId
     */
    public void setRegistrationId(Number value) {
        setAttributeInternal(REGISTRATIONID, value);
    }

    /**
     * Gets the attribute value for LineId, using the alias name LineId.
     * @return the LineId
     */
    public Number getLineId() {
        return (Number)getAttributeInternal(LINEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LineId.
     * @param value value to set the LineId
     */
    public void setLineId(Number value) {
        setAttributeInternal(LINEID, value);
    }

    /**
     * Gets the attribute value for ProductCode, using the alias name ProductCode.
     * @return the ProductCode
     */
    public String getProductCode() {
        return (String)getAttributeInternal(PRODUCTCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProductCode.
     * @param value value to set the ProductCode
     */
    public void setProductCode(String value) {
        setAttributeInternal(PRODUCTCODE, value);
    }

    /**
     * Gets the attribute value for Qty, using the alias name Qty.
     * @return the Qty
     */
    public Number getQty() {
        return (Number)getAttributeInternal(QTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Qty.
     * @param value value to set the Qty
     */
    public void setQty(Number value) {
        setAttributeInternal(QTY, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity RegistrationEOImpl.
     */
    public RegistrationEOImpl getRegistrationEO() {
        return (RegistrationEOImpl)getAttributeInternal(REGISTRATIONEO);
    }

    /**
     * Sets <code>value</code> as the associated entity RegistrationEOImpl.
     */
    public void setRegistrationEO(RegistrationEOImpl value) {
        setAttributeInternal(REGISTRATIONEO, value);
    }

    /**
     * @param lineId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number lineId) {
        return new Key(new Object[]{lineId});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("model.entity.RegistrationLinesEO");
        }
        return mDefinitionObject;
    }

    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl s = new SequenceImpl("REGISTRATION_LINES_S",getDBTransaction());
        Number seqNum=s.getSequenceNumber();
        setLineId(seqNum);      
    }
}
