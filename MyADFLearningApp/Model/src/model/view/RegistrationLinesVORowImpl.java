package model.view;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Feb 03 10:24:19 IST 2009
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RegistrationLinesVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        LineId {
            public Object get(RegistrationLinesVORowImpl obj) {
                return obj.getLineId();
            }

            public void put(RegistrationLinesVORowImpl obj, Object value) {
                obj.setLineId((Number)value);
            }
        }
        ,
        ProductCode {
            public Object get(RegistrationLinesVORowImpl obj) {
                return obj.getProductCode();
            }

            public void put(RegistrationLinesVORowImpl obj, Object value) {
                obj.setProductCode((String)value);
            }
        }
        ,
        Qty {
            public Object get(RegistrationLinesVORowImpl obj) {
                return obj.getQty();
            }

            public void put(RegistrationLinesVORowImpl obj, Object value) {
                obj.setQty((Number)value);
            }
        }
        ,
        RegistrationId {
            public Object get(RegistrationLinesVORowImpl obj) {
                return obj.getRegistrationId();
            }

            public void put(RegistrationLinesVORowImpl obj, Object value) {
                obj.setRegistrationId((Number)value);
            }
        }
        ,
        UnitPrice {
            public Object get(RegistrationLinesVORowImpl obj) {
                return obj.getUnitPrice();
            }

            public void put(RegistrationLinesVORowImpl obj, Object value) {
                obj.setUnitPrice((Number)value);
            }
        }
        ,
        Currency {
            public Object get(RegistrationLinesVORowImpl obj) {
                return obj.getCurrency();
            }

            public void put(RegistrationLinesVORowImpl obj, Object value) {
                obj.setCurrency((String)value);
            }
        }
        ,
        UsdAmount {
            public Object get(RegistrationLinesVORowImpl obj) {
                return obj.getUsdAmount();
            }

            public void put(RegistrationLinesVORowImpl obj, Object value) {
                obj.setUsdAmount((Number)value);
            }
        }
        ,
        UsdPfiAmount {
            public Object get(RegistrationLinesVORowImpl obj) {
                return obj.getUsdPfiAmount();
            }

            public void put(RegistrationLinesVORowImpl obj, Object value) {
                obj.setUsdPfiAmount((Number)value);
            }
        }
        ,
        UsdTotalAmount {
            public Object get(RegistrationLinesVORowImpl obj) {
                return obj.getUsdTotalAmount();
            }

            public void put(RegistrationLinesVORowImpl obj, Object value) {
                obj.setUsdTotalAmount((Number)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(RegistrationLinesVORowImpl object);

        public abstract void put(RegistrationLinesVORowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int LINEID = AttributesEnum.LineId.index();
    public static final int PRODUCTCODE = AttributesEnum.ProductCode.index();
    public static final int QTY = AttributesEnum.Qty.index();
    public static final int REGISTRATIONID = AttributesEnum.RegistrationId.index();
    public static final int UNITPRICE = AttributesEnum.UnitPrice.index();
    public static final int CURRENCY = AttributesEnum.Currency.index();
    public static final int USDAMOUNT = AttributesEnum.UsdAmount.index();
    public static final int USDPFIAMOUNT = AttributesEnum.UsdPfiAmount.index();
    public static final int USDTOTALAMOUNT = AttributesEnum.UsdTotalAmount.index();

    /**
     * This is the default constructor (do not remove).
     */
    public RegistrationLinesVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute LineId.
     * @return the LineId
     */
    public Number getLineId() {
        return (Number) getAttributeInternal(LINEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LineId.
     * @param value value to set the  LineId
     */
    public void setLineId(Number value) {
        setAttributeInternal(LINEID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ProductCode.
     * @return the ProductCode
     */
    public String getProductCode() {
        return (String) getAttributeInternal(PRODUCTCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ProductCode.
     * @param value value to set the  ProductCode
     */
    public void setProductCode(String value) {
        setAttributeInternal(PRODUCTCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Qty.
     * @return the Qty
     */
    public Number getQty() {
        return (Number) getAttributeInternal(QTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Qty.
     * @param value value to set the  Qty
     */
    public void setQty(Number value) {
        setAttributeInternal(QTY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RegistrationId.
     * @return the RegistrationId
     */
    public Number getRegistrationId() {
        return (Number) getAttributeInternal(REGISTRATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RegistrationId.
     * @param value value to set the  RegistrationId
     */
    public void setRegistrationId(Number value) {
        setAttributeInternal(REGISTRATIONID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute UnitPrice.
     * @return the UnitPrice
     */
    public Number getUnitPrice() {
        return (Number) getAttributeInternal(UNITPRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute UnitPrice.
     * @param value value to set the  UnitPrice
     */
    public void setUnitPrice(Number value) {
        setAttributeInternal(UNITPRICE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Currency.
     * @return the Currency
     */
    public String getCurrency() {
        return (String) getAttributeInternal(CURRENCY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Currency.
     * @param value value to set the  Currency
     */
    public void setCurrency(String value) {
        setAttributeInternal(CURRENCY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute UsdAmount.
     * @return the UsdAmount
     */
    public Number getUsdAmount() {
        return (Number) getAttributeInternal(USDAMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute UsdAmount.
     * @param value value to set the  UsdAmount
     */
    public void setUsdAmount(Number value) {
        setAttributeInternal(USDAMOUNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute UsdPfiAmount.
     * @return the UsdPfiAmount
     */
    public Number getUsdPfiAmount() {
        return (Number) getAttributeInternal(USDPFIAMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute UsdPfiAmount.
     * @param value value to set the  UsdPfiAmount
     */
    public void setUsdPfiAmount(Number value) {
        setAttributeInternal(USDPFIAMOUNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute UsdTotalAmount.
     * @return the UsdTotalAmount
     */
    public Number getUsdTotalAmount() {
        return (Number) getAttributeInternal(USDTOTALAMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute UsdTotalAmount.
     * @param value value to set the  UsdTotalAmount
     */
    public void setUsdTotalAmount(Number value) {
        setAttributeInternal(USDTOTALAMOUNT, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * Sample exportable method.
     */
    public void sampleRegistrationLinesVORowImplExportable() {
    }

    /**
     * Sample exportable method.
     */
    public void sampleRegistrationLinesVORowImplExportable2(String testParam1) {
    }
}
